Arrays in Java
An array is a group of like-typed variables that are referred to by a common name. Arrays in Java work differently than they do in C/C++. 
Following are some important point about Java arrays.
In Java all arrays are dynamically allocated.
Since arrays are objects in Java, we can find their length using member length. This is different from C/C++ where we find length using sizeof.
A Java array variable can also be declared like other variables with [] after the data type.
The variables in the array are ordered and each have an index beginning from 0.
Java array can be also be used as a static field, a local variable or a method parameter.
The size of an array must be specified by an int value and not long or short.
The direct superclass of an array type is Object.
Array can contains primitives data types as well as objects of a class depending on the definition of array.
In case of primitives data types, the actual values are stored in contiguous memory locations. In case of objects of a class, 
the actual objects are stored in heap segment.

One-Dimensional Arrays :
The general form of a one-dimensional array declaration is
type var-name[];
OR
type[] var-name;
An array declaration has two components: the type and the name. type declares the element type of the array. The element type
determines the data type of each element that comprises the array. Like array of int type, we can also create an array of other
primitive data types like char, float, double..etc or user defined data type(objects of a class).Thus, the element type for the
array determines what type of data the array will hold.
Instantiating an Array in Java-----------
When an array is declared, only a reference of array is created. To actually create or give memory to array,
you create an array like this:The general form of new as it applies to one-dimensional arrays appears as follows:
var-name = new type [size];
Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and var-name 
is the name of array variable that is linked to the array. That is, to use new to allocate an array, you must specify
the type and number of elements to allocate.
Example:
int intArray[];    //declaring array
intArray = new int[20];  // allocating memory to array
OR
int[] intArray = new int[20]; // combining both statements in one
Note :
The elements in the array allocated by new will automatically be initialized to zero (for numeric types), 
false (for boolean), or null (for reference types).Refer Default array values in Java.
Obtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate 
the memory that will hold the array, using new, and assign it to the array variable. Thus, in Java all arrays are dynamically allocated.
Array Literal
In a situation, where the size of the array and variables of array are already known, array literals can be used.
int[] intArray = { 1,2,3,4,5,6,7,8,9,10 }; 
 // Declaring array literal
The length of this array determines the length of the created array.
There is no need to write the new int[] part in the latest versions of Java
Accessing Java Array Elements using for Loop--------
Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. 
All the elements of array can be accessed using Java for Loop.

// accessing the elements of the specified array
for (int i = 0; i < arr.length; i++)
  System.out.println("Element of array "+ arr[i]);
